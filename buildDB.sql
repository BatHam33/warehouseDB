CREATE TABLE WAREHOUSE
(
  StoreID SERIAL,
  StoreZip INT NOT NULL,
  PRIMARY KEY (StoreID)
);
CREATE TABLE REGION
(
  RegionID SERIAL,
  RegionName VARCHAR NOT NULL,
  StoreID INT NOT NULL,
  PRIMARY KEY (RegionID),
  FOREIGN KEY (StoreID) REFERENCES WAREHOUSE(StoreID)
);
CREATE TABLE EMPLOYEE
(
  EmployeeID SERIAL,
  FirstName VARCHAR NOT NULL,
  LastName VARCHAR NOT NULL,
  SSN INT NOT NULL,
  Title VARCHAR NOT NULL,
  StoreID INT NOT NULL,
  PRIMARY KEY (EmployeeID),
  FOREIGN KEY (StoreID) REFERENCES WAREHOUSE(StoreID)
);
CREATE TABLE CUSTOMER
(
  CustomerID SERIAL,
  Email VARCHAR,
  Password VARCHAR,
  PRIMARY KEY (CustomerID)
);
CREATE TABLE CATEGORY
(
  CategoryID SERIAL,
  CategoryName VARCHAR NOT NULL,
  PRIMARY KEY (CategoryID)
);
CREATE TABLE Admin
(
  AdminID SERIAL,
  Username VARCHAR NOT NULL,
  Password VARCHAR NOT NULL,
  EmployeeID INT NOT NULL,
  PRIMARY KEY (AdmminID),
  FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEE(EmployeeID)
);
CREATE TABLE SALES_TRANSACTION
(
  PurchaseDate DATE NOT NULL,
  TransactionID SERIAL,
  CustomerID INT NOT NULL,
  PRIMARY KEY (TransactionID),
  FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID)
);
CREATE TABLE PRODUCT
(
  ProductID SERIAL,
  ProductPrice FLOAT NOT NULL,
  ProductName VARCHAR NOT NULL,
  ProductLocation VARCHAR NOT NULL,
  CategoryID INT NOT NULL,
  PRIMARY KEY (ProductID),
  FOREIGN KEY (CategoryID) REFERENCES CATEGORY(CategoryID)
);
CREATE TABLE View
(
  ProductID INT NOT NULL,
  CustomerID INT NOT NULL,
  PRIMARY KEY (ProductID, CustomerID),
  FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID),
  FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID)
);
CREATE TABLE SoldVia
(
  NoOfItems INT NOT NULL,
  TransactionID INT NOT NULL,
  ProductID INT NOT NULL,
  PRIMARY KEY (TransactionID, ProductID),
  FOREIGN KEY (TransactionID) REFERENCES SALES_TRANSACTION(TransactionID),
  FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID)
);
CREATE TABLE contains
(
  StoreID INT NOT NULL,
  ProductID INT NOT NULL,
  PRIMARY KEY (StoreID, ProductID),
  FOREIGN KEY (StoreID) REFERENCES WAREHOUSE(StoreID),
  FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID)
);